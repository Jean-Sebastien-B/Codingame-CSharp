using System;
using System.Linq;
using System.Collections.Generic;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution
{
    static void Main(string[] args)
    {
        int N = int.Parse(Console.ReadLine()); // Number of elements which make up the association table.
        int Q = int.Parse(Console.ReadLine()); // Number Q of file names to be analyzed.
                                               
        Dictionary<string, string> FileExt = new Dictionary<string, string>();    //Dictionnaire type cl√© valeur (EXT, MT)
        List<string> fileName = new List<string>();
        for (int i = 0; i < N; i++)
        {
            string[] inputs = Console.ReadLine().Split(' ');
            string EXT = inputs[0].ToLower(); 
            string MT = inputs[1]; 
            FileExt.Add(EXT, MT);
        }
        for (int i = 0; i < Q; i++)
        {
            string FNAME = Console.ReadLine();
            FNAME = FNAME.ToLower();
            if (FNAME.Contains('.'))
            {
                FNAME = FNAME.Substring(FNAME.LastIndexOf('.') + 1);
            }
            else
            {
                FNAME = "N/A";
            }
            fileName.Add(FNAME);
        }

        foreach (string ext in fileName)
        {
            if (ext == "N/A")
            {
                Console.WriteLine("UNKNOWN");
            }
            else if (FileExt.ContainsKey(ext))
            {
                string mimeType = string.Empty;
                FileExt.TryGetValue(ext, out mimeType);
                Console.WriteLine(mimeType);
            }
            else
            {
                Console.WriteLine("UNKNOWN");
            }
        }
    }
}
